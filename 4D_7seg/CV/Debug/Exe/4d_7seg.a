;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/24/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <math.h>
;
;int num = 0;
;
;
;int container;
;int t0 = 0;
;int t1 = 0;
;int turn = 0;
;
;
;interrupt [TIM0_OVF]
;
;void timer0_ovf_isr(void) {
; 0000 0027 void timer0_ovf_isr(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028     t1++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0029 
; 0000 002A     if (t1 == 2) {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002B         PORTC = pow(2, turn - 1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002C         container = num / pow(10, turn - 1);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002D         container = container % 10;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E         PORTD = container;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002F         turn++;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0030         if (turn > 4) {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0031             turn = 1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0032         }
; 0000 0033         t1 = 0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0034     }
; 0000 0035 
; 0000 0036     TCNT0 = 0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0037 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;
;interrupt [TIM1_OVF]
;
;void timer1_ovf_isr(void) {
; 0000 003C void timer1_ovf_isr(void) {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003D     t0++;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003E     if (t0 == 250) {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003F         if (num > 9999) {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0040             num = 0;
;PCODE: $0000004B VOL: 0
; 0000 0041         }
; 0000 0042         num++;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0043         t0 = 0;
;PCODE: $00000050 VOL: 0
; 0000 0044     }
; 0000 0045 
; 0000 0046     TCNT1H = 0xFF;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0047     TCNT1L = 0xF0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0048 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;void main(void) {
; 0000 004A void main(void) {
;PCODE: $00000059 VOL: 0
; 0000 004B     DDRD = 0xff;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004C     PORTD = 0xff;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004D 
; 0000 004E     DDRC = 0xff;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004F     PORTC = 0xff;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0050 
; 0000 0051     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (1 << TOIE1) | (0 << OCIE0) |
; 0000 0052             (1 << TOIE0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0053 
; 0000 0054     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (1 << CS02) | (0 << CS01) | (1 << CS00);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0055     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0056 
; 0000 0057     TCNT1H = 0xFF;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0058     TCNT1L = 0xF0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0059 
; 0000 005A     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 005B     MCUCSR = (0 << ISC2);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005C 
; 0000 005D #asm("sei")
;PCODE: $00000070 VOL: 0
	sei
;PCODE: $00000071 VOL: 0
; 0000 005E 
; 0000 005F     while (1) {
;PCODE: $00000072 VOL: 0
; 0000 0060 
; 0000 0061     }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0062 }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
